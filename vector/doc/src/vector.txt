
Vector
======


Deform
------

``affine_transform_image``
``````````````````````````

``Image`` [OneBit|GreyScale|Grey16|RGB|Float|Complex] **affine_transform_image** (``Transformation`` *t*, ``bool`` *transform_bb* = False)


:Operates on: ``Image`` [OneBit|GreyScale|Grey16|Float|RGB]
:Returns: ``Image`` [OneBit|GreyScale|Grey16|RGB|Float|Complex]
:Category: Vector/Deform
:Defined in: deform.py
:Author: Michael Droettboom


Returns a new image which is the original image transformed
through the given Transformation matrix.

If *transform_bb* == ``True``, the bounding box of the new image will
be adjusted to reflect the transformation.  However, if the
transformation transforms pixels into negative coordinate space, the
image will be truncated.

When *transform_bb* == ``False``, the upper left corner of the resulting
image will always be (0, 0).

affine_transform_image is more general than rotate, scale etc. in the
Gamera core, however, in most cases is approximately twice as slow
when compared against single transformations.  However, for compound
transformations, affine_transformation_image can be faster.


----------

**Example 1:** affine_transform_image

|affine_transform_image_plugin_00_00| |affine_transform_image_plugin_00_01| 

.. |affine_transform_image_plugin_00_00| image:: images/affine_transform_image_plugin_00_00.png
   :height: 129
   :width: 227

.. |affine_transform_image_plugin_00_01| image:: images/affine_transform_image_plugin_00_01.png
   :height: 280
   :width: 465




Draw
----

``draw_path_filled``
````````````````````

**draw_path_filled** (Path *path*, Pixel *value*, float *accuracy*)


:Operates on: ``Image`` [OneBit|GreyScale|Grey16|RGB|Float|Complex]
:Category: Vector/Draw
:Defined in: render.py
:Author: Michael Droettboom


Renders a Path object to an Image.

*path*

  The Path object to draw

*value*

  The pixel value to use to fill

*accuracy*

  The error threshold for the accuracy of the bezier curve drawing



``draw_path_hollow``
````````````````````

**draw_path_hollow** (Path *path*, Pixel *value*, float *accuracy*)


:Operates on: ``Image`` [OneBit|GreyScale|Grey16|RGB|Float|Complex]
:Category: Vector/Draw
:Defined in: render.py
:Author: Michael Droettboom


Renders a Path object to an Image.

*path*

  The Path object to draw

*value*

  The pixel value to use to fill

*accuracy*

  The error threshold for the accuracy of the bezier curve drawing




Tracing
-------

``potrace``
```````````

PathList **potrace** (int *turd_size* = 2, ``Choice`` [black|white|left|right|minority|majority|random] *turn_policy* = minority, ``bool`` *optimize_curve* = True, float *optimize_tolerance* = 0.20, float *alphamax* = 1.00)


:Operates on: ``Image`` [OneBit]
:Returns: PathList
:Category: Vector/Tracing
:Defined in: tracing.py
:Author: Peter Selinger (wrapped for Gamera by Michael Droettboom)


Traces the image using the potrace_ algorithm by Peter Selinger.

Returns a PathList object as output.  Each Path in the PathList represents
a different connected component in the image.

The arguments are all passed along to the potrace_ algorithm.  See
the potrace_ documentation for more information.

*turd_size*

  suppress speckles of up to this size (default 2)

*turn_policy*

  Defines how to resolve ambiguities in path decomposition

  - black (0)

  - white (1)

  - left (2)

  - right (3)

  - minority (4) [default]

  - majority (5)

  - random (6)

*optimize_curve*

  When True, the number of curves used to outline the image
  will be minimized.

*optimize_tolerance*

  The amount of curve optimization error tolerance.

*alphamax*

  Corner threshold parameter.

.. _potrace: http://potrace.sf.net/


----------

**Example 1:** potrace

|potrace_plugin_00_00| |potrace_plugin_00_01| 

.. |potrace_plugin_00_00| image:: images/potrace_plugin_00_00.png
   :height: 99
   :width: 69

.. |potrace_plugin_00_01| image:: images/potrace_plugin_00_01.png
   :height: 299
   :width: 209




Transformation
--------------

``identity``
````````````

``Transformation`` **identity** ()


:Returns: ``Transformation``
:Category: Vector/Transformation
:Defined in: transformation.py
:Author: Michael Droettboom


Returns the identity transform, which is simply a transformation that does nothing.

----------

**Example 1:** identity

|identity_plugin_00_00| 

.. |identity_plugin_00_00| image:: images/identity_plugin_00_00.png
   :height: 299
   :width: 209



``reflect``
```````````

``Transformation`` **reflect** (``bool`` *x*, ``bool`` *y*)


:Returns: ``Transformation``
:Category: Vector/Transformation
:Defined in: transformation.py
:Author: Michael Droettboom


Creates a new Transformation matrix that reflects across the *x* axis (when *x* is True) and/or the *y* axis (when *y* is True).


``reflect_at``
``````````````

``Transformation`` **reflect_at** (``FloatPoint`` *p*, ``bool`` *x*, ``bool`` *y*)


:Returns: ``Transformation``
:Category: Vector/Transformation
:Defined in: transformation.py
:Author: Michael Droettboom


Creates a new Transformation matrix that reflects across the vertical line through *p.x* (when *x* is True) and/or the horizontal line through *p.y* (when *y* is True).

----------

**Example 1:** reflect_at

|reflect_at_plugin_00_00| 

.. |reflect_at_plugin_00_00| image:: images/reflect_at_plugin_00_00.png
   :height: 299
   :width: 209



``rotate_degrees``
``````````````````

``Transformation`` **rotate_degrees** (float *degrees*)


:Returns: ``Transformation``
:Category: Vector/Transformation
:Defined in: transformation.py
:Author: Michael Droettboom


Creates a new Transformation matrix that rotates by the given number of degrees around the origin.

----------

**Example 1:** rotate_degrees

|rotate_degrees_plugin_00_00| 

.. |rotate_degrees_plugin_00_00| image:: images/rotate_degrees_plugin_00_00.png
   :height: 299
   :width: 209



``rotate_degrees_at``
`````````````````````

``Transformation`` **rotate_degrees_at** (``FloatPoint`` *p*, float *degrees*)


:Returns: ``Transformation``
:Category: Vector/Transformation
:Defined in: transformation.py
:Author: Michael Droettboom


Creates a new Transformation matrix that rotates by the given number of degrees at point *p*.

----------

**Example 1:** rotate_degrees_at

|rotate_degrees_at_plugin_00_00| 

.. |rotate_degrees_at_plugin_00_00| image:: images/rotate_degrees_at_plugin_00_00.png
   :height: 299
   :width: 209



``rotate_radians``
``````````````````

``Transformation`` **rotate_radians** (float *radians*)


:Returns: ``Transformation``
:Category: Vector/Transformation
:Defined in: transformation.py
:Author: Michael Droettboom


Creates a new Transformation matrix that rotates by the given number of radians around the origin.

----------

**Example 1:** rotate_radians

|rotate_radians_plugin_00_00| 

.. |rotate_radians_plugin_00_00| image:: images/rotate_radians_plugin_00_00.png
   :height: 299
   :width: 209



``rotate_radians_at``
`````````````````````

``Transformation`` **rotate_radians_at** (``FloatPoint`` *p*, float *radians*)


:Returns: ``Transformation``
:Category: Vector/Transformation
:Defined in: transformation.py
:Author: Michael Droettboom


Creates a new Transformation matrix that rotates by the given number of radians at point *p*.

----------

**Example 1:** rotate_radians_at

|rotate_radians_at_plugin_00_00| 

.. |rotate_radians_at_plugin_00_00| image:: images/rotate_radians_at_plugin_00_00.png
   :height: 299
   :width: 209



``scale``
`````````

``Transformation`` **scale** (``FloatPoint`` *scale*)


:Returns: ``Transformation``
:Category: Vector/Transformation
:Defined in: transformation.py
:Author: Michael Droettboom


   or

**translate** (float *x*, float *y*)

Creates a new Transformation matrix that scales by the given amount around the origin.

----------

**Example 1:** scale

|scale_plugin_00_00| 

.. |scale_plugin_00_00| image:: images/scale_plugin_00_00.png
   :height: 299
   :width: 209



``scale_at``
````````````

``Transformation`` **scale_at** (``FloatPoint`` *at*, ``FloatPoint`` *scale*)


:Returns: ``Transformation``
:Category: Vector/Transformation
:Defined in: transformation.py
:Author: Michael Droettboom


   or

**translate** (FloatPoint *p*, float *x*, float *y*)

Creates a new Transformation matrix that scales by the given amount around point *p*.

----------

**Example 1:** scale_at

|scale_at_plugin_00_00| 

.. |scale_at_plugin_00_00| image:: images/scale_at_plugin_00_00.png
   :height: 299
   :width: 209



``shear``
`````````

``Transformation`` **shear** (``FloatPoint`` *shear*)


:Returns: ``Transformation``
:Category: Vector/Transformation
:Defined in: transformation.py
:Author: Michael Droettboom


  or 

**shear** (float *x*, float *y*)

Creates a new Transformation matrix that shears by the given amount, in pixels.

----------

**Example 1:** shear

|shear_plugin_00_00| 

.. |shear_plugin_00_00| image:: images/shear_plugin_00_00.png
   :height: 299
   :width: 209



``shear_degrees``
`````````````````

``Transformation`` **shear_degrees** (``FloatPoint`` *shear_degrees*)


:Returns: ``Transformation``
:Category: Vector/Transformation
:Defined in: transformation.py
:Author: Michael Droettboom


  or 

**shear_degrees** (float *x*, float *y*)

Creates a new Transformation matrix that shears by the given amount, in degrees.

----------

**Example 1:** shear_degrees

|shear_degrees_plugin_00_00| 

.. |shear_degrees_plugin_00_00| image:: images/shear_degrees_plugin_00_00.png
   :height: 299
   :width: 209



``shear_radians``
`````````````````

``Transformation`` **shear_radians** (``FloatPoint`` *shear_radians*)


:Returns: ``Transformation``
:Category: Vector/Transformation
:Defined in: transformation.py
:Author: Michael Droettboom


  or 

**shear_radians** (float *x*, float *y*)

Creates a new Transformation matrix that shears by the given amount, in radians.

----------

**Example 1:** shear_radians

|shear_radians_plugin_00_00| 

.. |shear_radians_plugin_00_00| image:: images/shear_radians_plugin_00_00.png
   :height: 299
   :width: 209



``transform_at``
````````````````

``Transformation`` **transform_at** (``FloatPoint`` *p*, ``Transformation`` *t*)


:Returns: ``Transformation``
:Category: Vector/Transformation
:Defined in: transformation.py
:Author: Michael Droettboom


Creates a new transformation based on *t* that is relative to point *p* rather than the origin.

Equivalent to::

   translate(-p) * t * translate(p)


``translate``
`````````````

``Transformation`` **translate** (``FloatPoint`` *translate*)


:Returns: ``Transformation``
:Category: Vector/Transformation
:Defined in: transformation.py
:Author: Michael Droettboom


   or

**translate** (float *x*, float *y*)

Creates a new Transformation matrix that translates by the given amount.

----------

**Example 1:** translate

|translate_plugin_00_00| 

.. |translate_plugin_00_00| image:: images/translate_plugin_00_00.png
   :height: 299
   :width: 209



